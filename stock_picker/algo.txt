Steps:
-> Understand the Problem (Explain simply, diagram)
-> Plan (Pseudo Code, inputs, outputs, steps, ui, comments)
-> Divide and Conquer (Split the problem into sub problems)

Problem:
	Implement a method #stock_picker that takes in an array of stock prices, one for each hypothetical day. It should return a pair of days representing the best day to buy and the best day to sell. Days start at 0.

	Example: > stock_picker([17,3,6,9,15,8,6,1,10])
  	=> [1,4]  # for a profit of $15 - $3 == $12

	Quick Tips:
	- You need to buy before you can sell
	- Pay attention to edge cases like when the lowest day is the last day or the highest day is the first day.

Understand the Problem:
	Given an array prices for each day, we need to calculate the profitable buy & sell day combo, which gives profit more than compared to other day pairs.	

Plan:
Input - Array of prices for continuous days
Output - Pair of numbers one to buy and one to sell - makes more profit

Pseudo Code:
	- Get input from the user - array
	- Initialize profit variable
	- Initialize combo variable
	- Get all the 2 element combinations using indexes for the given array
	- For each array combination
		- Subtract second element of the combination with the first element
		- If the value we get is less than current profit
			- continue
		- Else
			- update profit and combo with element indexes
			- update price with profit
	- Print Profit and Combo
